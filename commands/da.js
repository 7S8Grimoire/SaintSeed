const {
  SlashCommandBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  ComponentType,
  EmbedBuilder,
} = require("discord.js");
const i18next = require("i18next");
const moment = require('moment');
const { profiles, api } = require("../modules/api");
const { data } = require("./pray");

const owner_id = "240491981426393088";
const anton_id = "281478128629579776";
const piu_piu_id = "319116123612119040";
const EXP_MONEY = 1;
const EXP_NOT_MONEY = 2;
const NOT_EXP_MONEY = 3;
const NOT_EXT_NOT_MONEY = 4;

module.exports = {
  disabled: true,
  // categories: ["command_spam", "roulette"],
  guilds_white_list: [process.env.BREAD_BAKERY_ID],
  data: new SlashCommandBuilder()
    .setName("1-act")
    .setDescription("Start 1 act"),
  async execute(interaction) {
    if (interaction.user.id == anton_id) {
      return await interaction.reply('–ê —è –∑–Ω–∞—é —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å, –Ω–æ —É–≤—ã –ú—ã —Ç–µ–±—è –∑–Ω–∞–µ–º');
    }
    if (interaction.user.id != owner_id) {
      return await interaction.reply('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –º–µ–Ω—è üòö');
    }

    const timestamp = moment().unix();
    const buttonId = `act-1-start-${timestamp}`;
    const startFirstAct = new ButtonBuilder()
      .setCustomId(buttonId)
      .setLabel("–¢–∞ —Å–∞–º–∞—è –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
      .setStyle(ButtonStyle.Danger);

    let row = new ActionRowBuilder().addComponents(startFirstAct);

    await interaction.deferReply();

    let act1 = await interaction.editReply({
      components: [row],
    });

    const filter = (i) => {
      return i.customId === buttonId && i.user.id === anton_id;
    };

    const collector = await act1.createMessageComponentCollector({
      componentType: ComponentType.Button,
      filter,
    });

    collector.on("collect", async (i) => {
      row = row.setComponents(startFirstAct.setDisabled(true));
      collector.stop();
      interaction.editReply({
        components: [row]
      });
      part_1(i);
    });
  },
};

async function part_1(interaction) {
  await interaction.deferReply();

  const timestamp = moment().unix();
  const embed = new EmbedBuilder()
    .setTitle('–ê–∫—Ç 1 - –û—Å–≤–æ–±–æ–¥–∏—Å—å')
    .setDescription(getText_1());

  const buttonId = `continue-${timestamp}`;
  const continueAct = new ButtonBuilder()
    .setCustomId(buttonId)
    .setLabel("–î–∞, —è —É–≤–µ—Ä–µ–Ω!")
    .setStyle(ButtonStyle.Primary);

  const row = new ActionRowBuilder().addComponents(continueAct);

  const message = await interaction.editReply({
    embeds: [embed],
    components: [row],
  });

  const filter = (i) => {
    return i.customId === buttonId && i.user.id === anton_id;
  };

  const collector = await message.createMessageComponentCollector({
    componentType: ComponentType.Button,
    filter,
  });

  collector.on("collect", async (i) => {
    collector.stop();
    part_2(i);
  });
}

async function part_2(interaction) {
  await interaction.deferReply();

  const timestamp = moment().unix();
  const embed = new EmbedBuilder()
    .setDescription(getText_2());

  const moneyButtonId = `money-${timestamp}`;
  const processButtonId = `process-${timestamp}`;
  const moneyButton = new ButtonBuilder()
    .setCustomId(moneyButtonId)
    .setLabel("–¥–µ–Ω—å–≥–∏")
    .setStyle(ButtonStyle.Primary);
  const processButton = new ButtonBuilder()
    .setCustomId(processButtonId)
    .setLabel("–ü—Ä–æ—Ü–µ—Å—Å")
    .setStyle(ButtonStyle.Primary);
  const row = new ActionRowBuilder().addComponents(moneyButton, processButton);

  const message = await interaction.editReply({
    embeds: [embed],
    components: [row],
  });

  const filter = (i) => {
    return (i.customId === moneyButtonId || i.customId === processButtonId) && i.user.id === piu_piu_id;
  };

  const collector = await message.createMessageComponentCollector({
    componentType: ComponentType.Button,
    filter,
  });

  collector.on("collect", async (i) => {
    collector.stop();
    const choose = {
      is_money: i.customId === moneyButtonId
    };
    part_3(i, choose);
  });

}

async function part_3(interaction, choose) {
  await interaction.deferReply();

  const timestamp = moment().unix();
  const embed = new EmbedBuilder()
    .setDescription(getText_3(choose));

  const expButtonId = `exp-${timestamp}`;
  const praysButtonId = `prays-${timestamp}`;
  const expButton = new ButtonBuilder()
    .setCustomId(expButtonId)
    .setLabel("–≠–∫—Å–ø–∏")
    .setStyle(ButtonStyle.Primary);
  const praysButton = new ButtonBuilder()
    .setCustomId(praysButtonId)
    .setLabel("–ú–æ–ª–∏—Ç–≤—ã")
    .setStyle(ButtonStyle.Primary);
  const row = new ActionRowBuilder().addComponents(expButton, praysButton);

  const message = await interaction.editReply({
    embeds: [embed],
    components: [row],
  });

  const filter = (i) => {
    return (i.customId === expButtonId || i.customId === praysButtonId) && i.user.id === piu_piu_id;
  };

  const collector = await message.createMessageComponentCollector({
    componentType: ComponentType.Button,
    filter,
  });

  collector.on("collect", async (i) => {
    collector.stop();
    choose.is_exp = i.customId === expButtonId;
    part_4(i, choose);
  });
}

async function part_4(interaction, choose) {
  await interaction.deferReply();

  const embed = new EmbedBuilder()
    .setDescription(getText_4(choose));


  if (getResult(choose) == EXP_MONEY) {
    let data = [
      {
        user_id: piu_piu_id,
        guild_id: process.env.BREAD_BAKERY_ID,
        experience: 8 * 1000 * 1000,
      },
      {
        user_id: anton_id,
        guild_id: process.env.BREAD_BAKERY_ID,
        experience: 8 * 100 * 1000,
      }
    ];
    profiles.bulkAdd(data);
  }
  else if (getResult(choose) == EXP_NOT_MONEY) {
    let data = [
      {
        user_id: piu_piu_id,
        guild_id: process.env.BREAD_BAKERY_ID,
        experience: 8 * 1000 * 1000 + 8 * 100 * 1000,
      },
    ];
    await profiles.bulkAdd(data);
  }
  else if (getResult(choose) == NOT_EXP_MONEY) {

  }
  else if (getResult(choose) == NOT_EXT_NOT_MONEY) {
    let data = [
      {
        user_id: piu_piu_id,
        guild_id: process.env.BREAD_BAKERY_ID,
        experience: 8 * 100 * 1000,
      },
    ];
    await profiles.bulkAdd(data);
  }

  const savePiuPiuPrays = getResult(choose) == NOT_EXT_NOT_MONEY || getResult(choose) == NOT_EXP_MONEY;  
  const experienceEarnedList = [];

  await api.get(`profile/${process.env.BREAD_BAKERY_ID}`, {
    params: {
      limit: 0
    }
  })
    .then(({ data }) => {
      if (savePiuPiuPrays) {
        data = data.filter(profile => profile.user_id != piu_piu_id);
      }
      const mappedPizdecZeroing = data.map(profile => {
        const earnedExperience = profile.pray?.total * 9 * 1000;
        experienceEarnedList.push({
          user_id: profile.user_id,
          earnedExperience: earnedExperience,
          had_total: profile.pray?.total,
        });        
        return {
          user_id: profile.user_id,
          guild_id: profile.guild_id,
          experience: profile.experience + earnedExperience,
          pray: {
            date: 0,
            streak: 0,
            total: 0
          }
        }
      });

      api.patch(`profile`, mappedPizdecZeroing);

    });
  
  const convertedEmbed = new EmbedBuilder()
    .setTitle('–¢–æ–ø –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤')
    .addFields(experienceEarnedList.slice(0, 10).map(earned => {
      return {
        name: interaction.guild.members.cache.get(earned.user_id).displayName,
        value: `${earned.had_total} –ø—Ä–µ–µ–≤ => ${earned.earnedExperience} –µ–∫—Å–ø–∏`,
      }
    }));

  await interaction.editReply({
    embeds: [embed, convertedEmbed],
    components: [],
  });
}

function getText_1() {
  const texts = [
    '–ö–æ–≥–¥–∞‚àí—Ç–æ —è –±—ã–ª–∞ –∞–Ω–≥–µ–ª–æ–º‚àí—Ä–∞–±–æ–º –±–æ–≥–∞ ¬´–ê–Ω–≥–µ–ª–æ–≤¬ª. –õ—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ —à–ª–æ –ø—Ä–æ—Ç–∏–≤ –µ—ë –ø—Ä–∏–∫–∞–∑–æ–≤, –Ω–µ—Å–ª–æ –∑–∞ —Å–æ–±–æ–π –Ω–∞–∫–∞–∑–∞–Ω–∏–µ. –û–Ω–∞ –ª—é–±–∏–ª–∞ –Ω–∞—Å –ø—ã—Ç–∞—Ç—å. –ê —Ç–æ, —á—Ç–æ –ª—é–¥–∏ –Ω–∞–∑—ã–≤–∞–ª–∏ –Ω–∏–º–±–æ–º –∏ —è–≤–ª—è–ª–æ—Å—å –¥–ª—è –Ω–∏—Ö –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º, –±—ã–ª–æ –¥–ª—è –Ω–∞—Å –æ—à–µ–π–Ω–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–≥ —É–±–∏—Ç—å –Ω–∞—Å. –û–¥–Ω–∞–∂–¥—ã –æ–Ω–∞ –º–Ω–µ –∏ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∞–Ω–≥–µ–ª–∞–º –ø—Ä–∏–∫–∞–∑–∞–ª–∞ —É–±–∏—Ç—å —Å–µ–º—å—é –¥–µ–º–æ–Ω–∞ –∏ —á–µ–ª–æ–≤–µ–∫–∞. –£ –Ω–∏—Ö –±—ã–ª —Ä–µ–±—ë–Ω–æ–∫, –ø–æ–ª—É‚àí–¥–µ–º–æ–Ω. –Ø –±—ã–ª–∞ –ø—Ä–æ—Ç–∏–≤ —É–±–∏–π—Å—Ç–≤–∞ —ç—Ç–æ–π —Å–µ–º—å–∏, –Ω–æ —Å–æ –º–Ω–æ–π –±—ã–ª–∏ –¥—Ä—É–≥–∏–µ –∞–Ω–≥–µ–ª—ã, —á—Ç–æ —É–∂–µ –ø–æ—Ç–µ—Ä—è–ª–∏ —Ä–∞—Å—Å—É–¥–æ–∫ –∏ –Ω–µ —Ö–æ—Ç–µ–ª–∏ —Å—Ç—Ä–∞–¥–∞—Ç—å ‚Äì —è –∂–µ —Å–ø—Ä—è—Ç–∞–ª–∞ —Ä–µ–±—ë–Ω–∫–∞, –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–µ–ª. –ö–∞–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ —è –ª–∏—à–∏–ª–∞—Å—å –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏ –∏ –ø—Ä–∞–≤–æ–π –Ω–æ–≥–∏. –ò–∑ –º–µ–Ω—è —Å–¥–µ–ª–∞–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞ –¥—É—à –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–Ω–æ —Å—Ç–æ–ª–µ—Ç–∏–µ —è –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–ª–∞ –¥—É—à–∏ –ø–æ–≥–∏–±—à–∏—Ö —Å—É—â–µ—Å—Ç–≤, —á—Ç–æ–±—ã –ª–∏—à–∏—Ç—å –¥–µ–º–æ–Ω–æ–≤ –ø–∏—â–∏. –ò–Ω–æ–≥–¥–∞ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–ª–∞ –ª—é–¥–µ–π –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –ø–æ —Ç–∏–ø—É –≤–æ–π–Ω –∏–ª–∏ –æ–±—ã—á–Ω—ã—Ö —É–±–∏–π—Å—Ç–≤. –Ø –±—ã–ª–∞ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–∞—è, —Ç–µ–º —á—Ç–æ –ª—é–¥–∏ –ø–æ–∫–ª–∞–Ω—è—é—Ç—Å—è —Å—Ç–æ–ª—å —É–∂–∞—Å–Ω–æ–º—É, —Ö—É–∂–µ –¥–µ–º–æ–Ω–∞, —Å—É—â–µ—Å—Ç–≤—É.',
    '–ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è –æ–±—ä—è–≤–∏–ª—Å—è –§–µ—Ä, –Ω–∞—à –±—ã–≤—à–∏–π –∫–æ—Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏–ª, —Ç–µ–º —É –∫–æ–≥–æ –µ—â–µ –æ—Å—Ç–∞–ª—Å—è —Ä–∞—Å—Å—É–¥–æ–∫, —Å–±–µ–∂–∞—Ç—å. –û–Ω —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞—à—ë–ª –¥–µ–º–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–º –ø–æ–º–æ—á—å ‚àí –æ–Ω–∏ –±—ã–ª–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –Ω–∞–º —Å–ª–æ–º–∞—Ç—å –Ω–∏–º–±—ã. –ù–æ –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –∑–∞–∫–ª—é—á–∏–ª –æ–Ω —Å–¥–µ–ª–∫—É –¥–ª—è —Å–µ–±—è ‚àí –æ–Ω –æ—Ç–¥–∞–ª –Ω–∞—Å –Ω–∞ —Å—ä–µ–¥–µ–Ω–∏–µ –¥–µ–º–æ–Ω–∞–º. –ù–∞—à–∏ –Ω–∏–º–±—ã –∏ –≤ –ø—Ä–∞–≤–¥—É —Å–ª–æ–º–∞–ª–∏—Å—å, –Ω–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–∏–ª—ã –∏ –¥–∞–∂–µ –¥–µ—Ä–∂–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≥–∞—Ö –Ω–µ –º–æ–≥–ª–∏, –∞ –∫—É–¥–∞ –º–Ω–µ —Å –æ–¥–Ω–æ–π. –§–µ—Ä —Å –∫–æ–≤–∞—Ä–Ω–æ–π —É–ª—ã–±–∫–æ–π –Ω–∞ –ª–∏—Ü–µ –≥–æ–≤–æ—Ä–∏–ª: ¬´–°–ø–∞—Å–∏–±–æ!¬ª. –Ø –∂–µ –ø–æ–ª–∑–ª–∞ –ø–æ –∑–µ–º–ª–µ, –ø—ã—Ç–∞—è—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è, –º–Ω–µ –±—ã–ª–æ —Å—Ç—Ä–∞—à–Ω–æ, –∞ –ø–æ–∑–∞–¥–∏ –∫—Ä–∏–∫–∏. –Ø —Ö–æ—Ç–µ–ª–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ –ø–æ–±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–π –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏–º–±–∞. –ù–æ –º–µ–Ω—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ–¥–∏–Ω –¥–µ–º–æ–Ω. –í–∑—è–ª –∏ –ø–æ–¥–Ω—è–ª –∑–∞ –ª–µ–≤—É—é —Ä—É–∫—É, –∫–∞–∫ –ø–æ–¥—É—à–∫—É. –Ø –Ω–µ –º–æ–≥–ª–∞ —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –µ–≥–æ, –≤ –≥–ª–∞–∑–∞—Ö –≤—Å—ë –º—ã–ª–∏–ª–æ—Å—å –æ—Ç —Å–ª—ë–∑. –û–Ω –º–Ω–µ —Å–∫–∞–∑–∞–ª: ¬´–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, –£–Ω–æ¬ª. –ó–∞—Ç–µ–º, –æ–¥–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ä—É–∫–∏, —Å–∫–≤–æ–∑—å –ø–ª–æ—Ç—å –∏ –∫–æ—Å—Ç–∏, —Å—Ö–≤–∞—Ç–∏–ª—Å—è –∑–∞ –º–æ—ë —Å–µ—Ä–¥—Ü–µ. –Ø –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞, –∫–∞–∫ —á—Ç–æ‚àí—Ç–æ –≤–Ω—É—Ç—Ä–∏ –ª–æ–ø–Ω—É–ª–æ –∏ –ø—Ä–æ–ø–∞–ª–æ. –í –≥–ª–∞–∑–∞—Ö –ø–æ–º—É—Ç–Ω–µ–ª–æ, –Ω–∞ –¥—É—à–µ —Å—Ç–∞–ª–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –ª–µ–≥–∫–æ –∏ –º—ã—Å–ª–∏ —É—Ç–∏—Ö–ª–∏. –≠—Ç–∞ –ø—É—Å—Ç–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–ª–∞—Å—å –º–Ω–µ —Å–≤–æ–±–æ–¥–æ–π, –∫–æ—Ç–æ—Ä—É—é —è —Ç–∞–∫ –¥–æ–ª–≥–æ –∂–µ–ª–∞–ª–∞.',
    '–ê —Ç—ã —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞–µ—à—å?'
  ];

  return texts.join('\n\n');
}

function getText_2() {
  const texts = [
    '–ü–æ—Å–ª–µ —è –æ—á–Ω—É–ª–∞—Å—å –Ω–∞ –∑–µ–º–ª–µ, –ª—É—á–∏ —Å–æ–ª–Ω—Ü–∞ —Å–≤–µ—Ç–∏–ª–∏ –º–Ω–µ –ø—Ä—è–º–æ –≤ –≥–ª–∞–∑–∞, –∞ –≥–æ–ª–æ–≤–∞ —Ä–∞—Å–∫–∞–ª—ã–≤–∞–ª–∞—Å—å. –Ø –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏–ø–æ–¥–Ω—è–ª–∞—Å—å –∏ —É–≤–∏–¥–µ–ª–∞, –∫–∞–∫ –¥–∏–∫–∏–µ –≤–æ–ª–∫–∏ –ª–∞–∫–æ–º–∏–ª–∏—Å—å –ø–∞–¥–∞–ª—å—é –º–æ–∏—Ö, —É–∂–µ –º—ë—Ä—Ç–≤—ã—Ö, —Å–æ–±—Ä–∞—Ç—å–µ–≤. –ü–æ–∫–∞ —è —Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ —ç—Ç–∏—Ö –≤–æ–ª–∫–æ–≤, –≤–æ –º–Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è –≥–æ–ª–æ–¥. –Ø, –Ω–µ–¥–æ–ª–≥–æ —Ä–∞–∑–º—ã—à–ª—è—è, –∏–Ω—Å—Ç–∏–Ω–∫—Ç–∏–≤–Ω–æ –Ω–∞–±—Ä–æ—Å–∏–ª–∞—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏ –æ—Ç—Ä—É–±–∏–ª–∞ –µ–º—É –≥–æ–ª–æ–≤—É –∏ —É–∂–µ –¥–µ—Ä–∂–∞–ª–∞ –≤ —Å–≤–æ–µ–π, –Ω–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–π, –ø—Ä–∞–≤–æ–π —Ä—É–∫–µ. –ê —Å–∞–º–∞ –ø—Ä–∏ —ç—Ç–æ–º —Å—Ç–æ—è–ª–∞ –Ω–∞ –¥–≤—É—Ö –Ω–æ–≥–∞—Ö. –†—É–∫–∞ –∏ –Ω–æ–≥–∞ –±—ã–ª–∏ —á—ë—Ä–Ω—ã–º–∏, —Å–≤–µ—Ç –∏—Ö –ø–æ–ø—Ä–æ—Å—Ç—É –Ω–µ –æ—Å–≤–µ—â–∞–ª, –¥–∞–∂–µ –ø–æ–≥–ª–æ—â–∞–ª—Å—è. –ù–µ –ø–æ–Ω–∏–º–∞—è –µ—â–µ —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ–¥–∞, —è –ø–æ–π–º–∞–ª–∞ –∏ –ø–æ–ª–∞–∫–æ–º–∏–ª–∞—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –≤–æ–ª–∫–∞–º–∏. –ü–æ—Å–ª–µ –ø—Ä–∏—à–ª–∞ –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ —Ä—É–∫–∞ –∏ –Ω–æ–≥–∞ –¥–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ, –∞ –Ω–∞ –ø–∞–º—è—Ç—å –ø—Ä–∏—à–ª–æ —Ç–æ, –∫–∞–∫ –º–æ—ë —Å–µ—Ä–¥—Ü–µ —Å–¥–∞–≤–∏–ª –¥–µ–º–æ–Ω, –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –µ—â–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª. –ú–Ω–µ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–∑–ª–µ—Ç–µ—Ç—å, –Ω–æ –º–æ–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –±–µ–ª—ã–µ –∫—Ä—ã–ª—å—è –Ω–µ —Å–ª—É—à–∞–ª–∏—Å—å –º–µ–Ω—è. –Ø –∑–∞–¥—É–º–∞–ª–∞—Å—å, –∞ –º–æ–∂–µ—Ç —ç—Ç–æ –∂–∏–∑–Ω—å –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–µ—á–Ω—ã–π —Å–æ–Ω?',
    '–Ø –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞ –±—Ä–æ–¥–∏—Ç—å –ø–æ –ª–µ—Å—É –∏ –º–µ–Ω—è –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–ª –≤–æ–ø—Ä–æ—Å ‚Äì –ø–æ—á–µ–º—É —è —Å–µ–π—á–∞—Å ¬´–ñ–∏–≤–∞¬ª?',
    '–ê —á—Ç–æ –¥–ª—è —Ç–µ–±—è, <@319116123612119040>, –≤–∞–∂–Ω–µ–π - –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥?'
  ];

  return texts.join('\n\n');
}

function getText_3(choose) {
  const texts = [
    choose.is_money
      ? '–ó–Ω–∞—á–∏—Ç —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –º–Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ—Å—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ã—á–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π.'
      : '–ú—ã —Å —Ç–æ–±–æ–π —á–µ–º-—Ç–æ –ø–æ—Ö–æ–∂–∏. *–£–Ω–æ —Å—Ç–∞–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–±–µ –ª—É—á—à–µ*',
    `–¢–æ–≥–¥–∞ —è —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂—É —Ç–∞–∫–æ–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å ${choose.is_money ? '8.000.000' : '8.800.000'} –µ–∫—Å–ø–∏, –Ω–æ –ø–æ—Ç–µ—Ä—è–µ—à—å —Å–≤–æ–∏ –º–æ–ª–∏—Ç–≤—ã`,
    '–ò–ª–∏ —Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏—à—å —Å–≤–æ–∏ –º–æ–ª–∏—Ç–≤—ã, –∑–∞–π–º–µ—à—å –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –º–æ–ª–∏—Ç–≤ –∏ –¥–æ–±—å–µ—à—å—Å—è 365 –¥–Ω–µ–π –º–æ–ª–∏—Ç–≤?',
  ];

  return texts.join('\n\n');
}

function getText_4(choose) {
  let texts = [];

  if (getResult(choose) == EXP_MONEY) {
    texts = [
      '–≠—Ç–æ –±—ã–ª–æ –æ—á–µ–≤–∏–¥–Ω–æ, —Ä–∞–∑ —É–∂ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –û–±–Ω—É–ª—è—é –º–æ–ª–∏—Ç–≤—ã.',
      '<@281478128629579776>, —Ç—ã –º–æ–π —Å–∞–º—ã–π –ø—Ä–µ–¥–∞–Ω–Ω—ã–π –≤—Å—ë –∂–µ —Å–ª—É–≥–∞!',
      '<@319116123612119040> –±—ã–ª –ø—Ä–æ—Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω "–ß—ë—Ä–Ω—ã–º–∏ –ö—Ä—ã–ª—å—è–º–∏" –Ω–∞ 8.000.000 –µ–∫—Å–ø–∏',
      '<@281478128629579776> –±—ã–ª –ø—Ä–æ—Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω "–ß—ë—Ä–Ω—ã–º–∏ –ö—Ä—ã–ª—å—è–º–∏" –Ω–∞ 800.000 –µ–∫—Å–ø–∏'
    ];
  }
  else if (getResult(choose) == EXP_NOT_MONEY) {
    texts = [
      '–Ø –±—ã–ª–∞ –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –º–Ω–µ–Ω–∏—è –æ —Ç–µ–±–µ. *–£–Ω–æ –∑–∞–¥—É–º–∞–ª–∞—Å—å*',
      '<@319116123612119040> –±—ã–ª –ø—Ä–æ—Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω "–ß—ë—Ä–Ω—ã–º–∏ –ö—Ä—ã–ª—å—è–º–∏" –Ω–∞ 8.800.000 –µ–∫—Å–ø–∏',
    ];
  }
  else if (getResult(choose) == NOT_EXP_MONEY) {
    texts = [
      '*–£–Ω–æ —Å—Ç–∞–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–µ*',
    ];
  }
  else if (getResult(choose) == NOT_EXT_NOT_MONEY) {
    texts = [
      '–Ø –≥—É–ª—è–ª–∞ –ø–æ –ª–µ—Å—É –∏ –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥–ª–∞ –Ω–∞—Å—ã—Ç—å—Å—è, –≥–æ–ª–æ–¥ –º–µ–Ω—è –Ω–µ –æ—Ç–ø—É—Å–∫–∞–ª –∏ —É—Å–∏–ª–∏–≤–∞–ª—Å—è. –Ø –≤—ã—Ä–µ–∑–∞–ª–∞ –≤—Å—é —Ñ–∞—É–Ω—É, —á—Ç–æ –ø–æ–ø–∞–¥–∞–ª–∞—Å—å –º–Ω–µ ‚Äì –ª–∏—Å—ã, –≤–æ–ª–∫–∏, –º–µ–¥–≤–µ–¥–∏, –∑–∞–π—Ü—ã, –ø—Ç–∏—Ü—ã, —ë–∂–∏–∫–∏, –∫—Ä—ã—Å—ã –∏ –¥–∞–∂–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ. –≠—Ç–æ —Ç–æ—á–Ω–æ —Å–æ–Ω‚Ä¶',
      '–ú–µ–Ω—è —Ä–∞–¥—É–µ—Ç —Ç–≤–æ–π –≤—ã–±–æ—Ä. –í –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–∏—à—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–Ω—É—Å–∫–∏.',
      '<@319116123612119040> –±—ã–ª –ø—Ä–æ—Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω "–ß—ë—Ä–Ω—ã–º–∏ –ö—Ä—ã–ª—å—è–º–∏" –Ω–∞ 800.000 –µ–∫—Å–ø–∏',
    ];
  }

  return texts.join('\n\n');
}

function getResult(choose) {
  if (choose.is_exp && choose.is_money) {
    return EXP_MONEY;
  }
  if (choose.is_exp && !choose.is_money) {
    return EXP_NOT_MONEY;
  }
  if (!choose.is_exp && choose.is_money) {
    return NOT_EXP_MONEY;
  }
  if (!choose.is_exp && !choose.is_money) {
    return NOT_EXT_NOT_MONEY;
  }
}
